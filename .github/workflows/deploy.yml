# Action 파일 제목
name: Spring Boot Gradle CI/CD

# 어디에 올릴 건지
on:
  push:
    branches: ["main"]
  # 수동으로 Action 실행할 수 있게 해주는 옵션
  workflow_dispatch:

# 진행할 내용 
jobs:
  # build, 배포에 활용되는 환경 잡아주기
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      # 파일에 문제가 없는지 확인하는 용도
      - name: Checkout repository
        uses: actions/checkout@v3
      
      # 자바 버전 세팅 - JDK 17 버전을 쓰는지 확인
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Gradle 형상 관리 툴로 jar 파일 만들기
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
      # 실행 권한 부여
      - name: Grant execute permission for Gradlew
        run: chmod +x ./gradlew
      # jar 만들기
      - name: Build JAR with Gradle
        run: ./gradlew clean bootJar -x test
      # jar를 서버에 복사  
      - name: Copy JAR to Public Server
        uses: appleboy/scp-action@v0.1.7
        with:
# ${} : 환경변수 (바뀔 수 있는 값!) -> 미 설정 시 공백 취급
# secrets : actions에 접근하기 위한 키값
          host: ${{ secrets.PUBLIC_HOST }} 
          username: root
          key: ${{ secrets.PUBLIC_SSH_KEY }} 
          source: |
            build/libs/*SNAPSHOT.jar
          target: /root/app/
# 배포 스크립트 보내기          
      - name: Copy deploy script to Public Server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PUBLIC_HOST }}
          username: root
          key: ${{ secrets.PUBLIC_SSH_KEY }}
          source: |
            deploy_private.sh
          target: /root/app/

# please..
      - name: Execute deploy_private.sh on Public Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PUBLIC_HOST }}
          username: root
          key: ${{ secrets.PUBLIC_SSH_KEY }}
          # 실행 권한 부여 
          # 실행
          script: |
            chmod +x /root/app/deploy_private.sh
            /root/app/deploy_private.sh
